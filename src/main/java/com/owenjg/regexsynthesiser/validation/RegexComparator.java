package com.owenjg.regexsynthesiser.validation;

import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

/**
 * A regex comparator that calculates numerical ratios between two regular expressions.
 * This allows for quantitative comparison between different regex generation techniques.
 */
public class RegexComparator {

    /**
     * Compare two regular expressions and return them in a formatted string.
     *
     * @param analyserRegex The regex generated by the pattern analyser
     * @param dfaRegex The regex generated by the DFA-based algorithm
     * @return A formatted string containing both regex patterns
     */
    public static String compareRegexes(String analyserRegex, String dfaRegex) {
        if (analyserRegex == null || dfaRegex == null) {
            return "Pattern Analyser: " + (analyserRegex != null ? analyserRegex : "N/A") + "\n" +
                    "DFA-based: " + (dfaRegex != null ? dfaRegex : "N/A");
        }

        // Return only the regex patterns for the UI fields
        return "Pattern Analyser: " + analyserRegex + "\n" +
                "DFA-based: " + dfaRegex;
    }

    /**
     * Calculate the length ratio between two regular expressions.
     * The ratio is expressed as (Pattern Analyser length : DFA length).
     *
     * @param analyserRegex The regex generated by the pattern analyser
     * @param dfaRegex The regex generated by the DFA-based algorithm
     * @return A double representing the ratio (e.g., 0.75 means the Pattern Analyser regex
     *         is 75% the length of the DFA regex)
     */
    public static double getLengthRatio(String analyserRegex, String dfaRegex) {
        if (analyserRegex == null || dfaRegex == null || dfaRegex.length() == 0) {
            return 0.0;
        }

        return (double) analyserRegex.length() / dfaRegex.length();
    }

    /**
     * Calculate the complexity ratio between two regular expressions based on special characters.
     * The ratio is expressed as (Pattern Analyser special chars : DFA special chars).
     *
     * @param analyserRegex The regex generated by the pattern analyser
     * @param dfaRegex The regex generated by the DFA-based algorithm
     * @return A double representing the ratio (e.g., 0.75 means the Pattern Analyser regex has
     *         75% as many special chars as the DFA regex)
     */
    public static double getComplexityRatio(String analyserRegex, String dfaRegex) {
        if (analyserRegex == null || dfaRegex == null) {
            return 0.0;
        }

        int analyserComplexity = countSpecialChars(analyserRegex);
        int dfaComplexity = countSpecialChars(dfaRegex);

        if (dfaComplexity == 0) {
            return analyserComplexity == 0 ? 1.0 : Double.POSITIVE_INFINITY;
        }

        return (double) analyserComplexity / dfaComplexity;
    }

    /**
     * Counts the special regex metacharacters in a regular expression.
     * Characters considered special are: [](){}*+?.|^$\
     *
     * @param regex The regular expression to analyse
     * @return The count of special characters
     */
    private static int countSpecialChars(String regex) {
        int count = 0;
        String specialChars = "[](){}*+?.|^$\\";

        for (char c : regex.toCharArray()) {
            if (specialChars.indexOf(c) >= 0) {
                count++;
            }
        }

        return count;
    }
}